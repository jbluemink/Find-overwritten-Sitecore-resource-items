---
ID: "e9501c44-7095-4795-acf0-02c4d72a7db7"
Parent: "4cf384c3-5c0c-4c8a-abfb-4fa0ca2556ec"
Template: "dd22f1b3-bd87-4db2-9e7d-f7a496888d43"
Path: "/sitecore/system/Modules/PowerShell/Script Library/Uxbee/IAR - Core/Functions/IAR-Compare"
SharedFields:
- ID: "b1a94ff0-6897-47c0-9c51-aa6acb80b1f0"
  Hint: Script
  Value: |
    function GetLanguageFieldValue($LanguageDataItem, $fieldguid, $version, $lan)
    {
        if ($LanguageDataItem -eq $null)
        {
            Write-Host "no LanguageData in IAR"
            return "no LanguageData in IAR"
        }
    
        $lanvalue = $null
        $tmp = $LanguageDataItem.TryGetValue($lan, [ref]$lanvalue)
        if ($lanvalue -eq $null) {
            Write-Host "language $lan not found in IAR, perhaps the language data is stored in a separate file"
            return "language $lan not found in IAR, perhaps the language data is stored in a separate file"
        }
        
        $vervalue = $null
        $tmp = $lanvalue.TryGetValue($version, [ref]$vervalue)
        if ($vervalue -eq $null) {
            Write-Host "version $version $lan not found in IAR"
            return "0"
        }
        
        $fieldvalue = $null
        $tmp = $vervalue.TryGetValue($fieldguid, [ref]$fieldvalue)
        if ($fieldvalue -eq $null) {
            Write-Host "field $fieldguid not found for version $version $lan in IAR"
            return "0"
        }
        return "1"
    }
    
    function GetFieldMessage($item, $type, $fieldguid, $iarvalue, $dbvalue)
    {
          $fielditem = Get-Item -Path "$($item.Database.Name):" -ID $fieldguid
          $result = "$type $fieldguid <b>$($fielditem.Name)</b>`n"
          $result += "IAR<div style='background-color:Yellow;'>"
          $result += [System.Net.WebUtility]::HtmlEncode($iarvalue.substring(0, [System.Math]::Min(500, $iarvalue.Length)))
          if ($iarvalue.Length -gt 500) {
           $result += "... <b>length=$($iarvalue.Length) characters</b>"
          }
          $result +="</div>DB<div style='background-color:Yellow;'>"
          $result += [System.Net.WebUtility]::HtmlEncode($dbvalue.substring(0, [System.Math]::Min(500, $dbvalue.Length)))
          if ($dbvalue.Length -gt 500) {
                 $result += "... <b>length=$($dbvalue.Length) characters</b>"
          }
          $result +="</div>`n"
          Write-Host $result
          return $result
    }
    
    function IAR-Compare($databaseName, $pathstring, $item)
    {
        if ($item -eq $null)
        {
             Write-Host "Error item.ID is null"
            exit
        }
        if ($item.ID -eq $null)
        {
             Write-Host "Error /  issue item.ID is null"
            exit
        }
        Write-Host "Compare item: $($item.FullPath)"
        $result = "<b style='font-size:18px;'>Compare IAR item with DB variant:</b> $($item.FullPath)`n`n$pathstring`n`n"
        $reportItems = @()
        $resourceLoaderType = ([System.Type]::GetType("Sitecore.Data.DataProviders.ReadOnly.Protobuf.IResourceLoader, Sitecore.Data.ResourceItems.ProtobufNet"))
        $resourceLoader = [Sitecore.DependencyInjection.ServiceLocator]::ServiceProvider.GetService($resourceLoaderType)
       $paths = [System.Collections.Generic.List[String]]@()
       foreach($iarPath in $pathstring)
       {
        $paths.Add( [Sitecore.MainUtil]::MapPath($iarPath));
       }
        $defaultFieldValues = New-Object -TypeName 'System.Collections.Generic.Dictionary[[guid], [string]]'
        $itemDataSet = $resourceLoader.LoadFromFiles($paths, "dat", $defaultFieldValues)
        Write-Host "Clear All SqlDataProvider Cache"
        Get-Cache -Name "SqlDataProvider - Prefetch data*" | % { $_.Clear() }
        Write-Host "Using the files in $path for database $databaseName"
        
        Write-Host "SharedData = $($itemDataSet.SharedData) tryget $($item.ID)"
        $itemFieldsIAR = $itemDataSet.SharedData.TryGetValue($item.ID.ToGuid())
        
        if ($itemFieldsIAR -ne $null)
        {
            Write-Host "Item found in IAR"
            foreach($fieldIAR in $itemFieldsIAR.GetEnumerator())
            {
                if ($fieldIAR.Value.ToString() -ne $item[$fieldIAR.Key])
                {
                  $result += GetFieldMessage $item "Shared Field" $fieldIAR.Key $fieldIAR.Value.ToString() $item[$fieldIAR.Key]
                }
                if ($item[$fieldIAR.Key].Shared -eq $false) {
                    $result += "WARNING IAR Shared Field $fieldIAR.Key is not shared in the Database `n"
                }
            }
        }
        
        #check if DB contains new standardFields
        foreach($field in $item.Fields)
        {
          if ($field.Shared -and ($field.Value -ne "")) {
              #check if DB contains new standardFields
              if ($itemFieldsIAR -eq $null) 
              {
                  Write-Host "zero sharedvalues found in IAR, new sharedfield with value $field in DB"
                  $result += GetFieldMessage $item "Shared Field not available in IAR (null or standard value)" $field.ID "" $item[$field.ID]
              }
              elseif ($itemFieldsIAR.ContainsKey($field.ID.ToGuid()) -eq $false)
              {
                   Write-Host "new sharedfield with value $field"
                   $result += GetFieldMessage $item "Shared Field not available in IAR (null or standard value)" $field.ID "" $item[$field.ID]
              }
          }
        }
            
        $itemFieldsIARVersion = $itemDataSet.LanguageData.TryGetValue($item.ID.ToGuid())
        if ($itemFieldsIARVersion -ne $null)
        {
            Write-Host "Item found in IAR versioned fields"
            foreach($languageIAR in $itemFieldsIARVersion.GetEnumerator())
            {
                Write-Host "Language - $($languageIAR.Key) `n"
                $lang = $languageIAR.Key
                $VersionData = $languageIAR.Value
                foreach($versionIAR in $VersionData.GetEnumerator())
                {
                  #version 0 is unversioned, else versioned
                  Write-Host "version is $($versionIAR.Key)"
                  if ($versionIAR.Key -eq 0) {
                      $lanitem = Get-Item -Path "$($item.Database.Name):" -ID $item.ID.Guid -Language $lang
                  } else 
                  {
                     $lanitem = Get-Item -Path "$($item.Database.Name):" -ID $item.ID.Guid -Language $lang -Version $versionIAR.Key
                  }
                  $fieldData = $versionIAR.Value
                  if ($lanitem -eq $null)
                  {
                      $result += "Version <b>$($versionIAR.Key) $lang</b> item version not found in Database `n`n"
                  } else 
                  {
                      foreach($fieldvalueIAR in $fieldData.GetEnumerator())
                      {
                          Write-Host "field id is $($fieldvalueIAR.Key)  value=$($fieldvalueIAR.Value)"
                          if ($fieldvalueIAR.Value.ToString() -ne $lanitem[$fieldvalueIAR.Key])
                          {
                            Write-Host "not equal"
                            $Fieldinfo = "Field"
                            if ($versionIAR.Key -eq 0) 
                            {
                            	$Fieldinfo = "unversioned Field"
                            }
                            $result += GetFieldMessage $item "Version <b>$($versionIAR.Key) $lang</b> $Fieldinfo" $fieldvalueIAR.Key $fieldvalueIAR.Value.ToString() $lanitem[$fieldvalueIAR.Key]
                          }
                      }
                  }
                }
            }
        }
    
        $itemversions = $item.Versions.GetVersions($true)
    
        foreach($itemversion in $itemversions)
        {
            Write-Host "itemversion =  $($item.ID) $($itemversion.Language) $($itemversion.Version)"
            #get overwrite database item
            $itemv = Get-Item -Path "master:" -ID $item.ID -Language $itemversion.Language -Version $itemversion.Version -ErrorAction SilentlyContinue
            foreach($field in $itemv.Fields)
            {
                 if ($field.Value -ne "" -And $field.Shared -eq $false -And $field.ContainsStandardValue -eq $false) 
                 {
                     if ($field.Unversioned)
                     {
                        #check if DB contains new unversionsed fields, this can multiple the same, no deduplication for now, todo
                        $isFieldinIAR = GetLanguageFieldValue $itemFieldsIARVersion $field.ID.Guid 0 $itemversion.Language
                        if ($isFieldinIAR -eq "0") 
                        {
                            $result += GetFieldMessage $item "Unversioned Field not available in IAR (null or standard value) Version $($itemversion.Version.Number) $($itemversion.Language) Field" $field.ID "" $itemv[$field.ID]
                        }
                        ElseIf ($isFieldinIAR -ne "1") 
    		    {
    		        $result += GetFieldMessage $item "Unversioned Field not available in IAR ($isFieldinIAR) Version $($itemversion.Version.Number) $($itemversion.Language) Field" $field.ID "" $itemv[$field.ID]
                        }
                     } else
                     {
                        # versioned field
                        $isVerFieldinIAR = GetLanguageFieldValue $itemFieldsIARVersion $field.ID.ToString() $itemversion.Version.Number $itemversion.Language
                        if ($isVerFieldinIAR -eq "0") 
                        {
                            $result += GetFieldMessage $item "Field not available in IAR (null or standard value) Version $($itemversion.Version.Number) $($itemversion.Language) Field" $field.ID "" $itemv[$field.ID]
                        }
                        ElseIf ($isVerFieldinIAR -ne "1") 
    		    {
    		    	$result += GetFieldMessage $item "Field not available in IAR ($isVerFieldinIAR)  Version $($itemversion.Version.Number) $($itemversion.Language) Field" $field.ID "" $itemv[$field.ID]
                        }
                     }
                 }
            }
        }
        
        Write-Host "Checking items for directory $pathstring done, $($result.Length)"
        return $result
    }
    
Languages:
- Language: en
  Versions:
  - Version: 1
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20230601T072122Z
    - ID: "52807595-0f8f-4b20-8d2a-cb71d28c6103"
      Hint: __Owner
      Value: |
        sitecore\Admin
    - ID: "5dd74568-4d4b-44c1-b513-0af5f4cda34f"
      Hint: __Created by
      Value: |
        sitecore\Admin
    - ID: "8cdc337e-a112-42fb-bbb4-4143751e123f"
      Hint: __Revision
      Value: "8707c162-7df9-43b4-9305-69fc7079044d"
    - ID: "badd9cf9-53e0-4d0c-bcc0-2d784c282f6a"
      Hint: __Updated by
      Value: |
        sitecore\jbluemink@uxbee.nl
    - ID: "d9cf14b1-fa16-4ba6-9288-e8a174d4d522"
      Hint: __Updated
      Value: 20240329T141445Z
